// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 6, 30, 15, 58, 19, 597999232, time.UTC),
		},
		"/common.go": &vfsgen۰CompressedFileInfo{
			name:             "common.go",
			modTime:          time.Date(2019, 7, 1, 12, 24, 58, 560769724, time.UTC),
			uncompressedSize: 770,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xd1\x6a\xc2\x30\x14\x86\xaf\xcd\x53\x1c\x7c\x00\x0b\xdb\x23\x58\x17\x84\x6e\x20\x2a\xbb\x1c\x59\x1b\xd3\xc3\x34\xe9\x92\x93\x0b\x11\xdf\x7d\xd4\xc6\x34\x25\x32\x7b\xf5\xf3\xf5\xff\xdb\xff\x1c\x4e\x27\xea\x1f\xa1\x24\x7c\x05\xc1\x18\x9e\x3a\x63\x09\xe6\x0a\xa9\xf5\xdf\x8b\xda\x9c\x0a\x65\x8c\x3a\xca\xc2\x7b\x6c\xe6\x8c\xd1\xb9\x93\xf0\x6e\x1a\x79\x04\x47\xd6\xd7\x04\x17\x36\x5b\x97\xd0\xbf\x5e\xec\xf7\xeb\x92\x5d\x83\xe9\xd7\x4b\x7b\x0e\xa6\xcb\x95\xb1\xa2\x80\x2d\x59\xd4\x6a\x69\x4e\x9d\x40\x0b\xe8\xc0\x3b\xd9\x00\x19\x70\x52\xd8\xba\x85\x83\xb1\x7d\x00\xb5\x02\xd4\xc0\xad\xe8\xda\x4d\x35\x7c\x6d\x1a\x1d\x7f\xbd\xda\xc0\xfd\x19\x92\x6c\xf6\xb1\xca\x50\xb5\xcb\x51\xee\xe2\xb9\x8b\xe7\xae\xa5\xd1\x24\x50\xbb\x04\x6d\x49\x58\x72\x9f\x48\x6d\x44\x2b\xdd\x0c\x20\xba\x86\x15\xac\x35\xfd\x3f\x3f\x6a\x72\xd9\xf4\x49\x6a\x32\x3a\x6a\x7a\x7d\xb9\x4d\x1c\x54\xb5\x8b\x2a\x32\x1e\x19\xbf\xb3\xa1\xcb\xdb\xd1\x88\x27\x6d\x0e\xbd\x25\xef\x33\x49\x4e\x1a\xdd\x02\xa1\x53\xd4\xd5\x2e\xd1\x09\xe7\x09\xe7\x23\x0f\x9b\x2a\x9f\x2c\xaa\x79\xb0\xa7\xf2\x61\xa9\xf1\x38\xfb\x5a\xe9\xa9\xfe\x05\x00\x00\xff\xff\x34\x34\x60\x9d\x02\x03\x00\x00"),
		},
		"/model.go": &vfsgen۰CompressedFileInfo{
			name:             "model.go",
			modTime:          time.Date(2019, 7, 1, 14, 18, 20, 768798336, time.UTC),
			uncompressedSize: 782,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x51\xcd\x8a\xdb\x30\x10\x3e\x47\x4f\xf1\x91\x43\x49\x42\x89\xa1\x7d\x82\xb2\xa1\xb0\xd0\x5e\x5a\xef\xa9\x14\x31\x2b\x8f\x6d\x51\x5b\x4a\xa5\x11\xec\x12\xf6\xdd\x8b\x6c\x39\x6e\x53\xda\x3d\x79\x34\xf8\xfb\x9d\x33\x99\x1f\xd4\x31\x74\x19\x94\xb2\xe3\xd9\x07\xc1\x4e\x6d\xb6\xc6\x3b\xe1\x27\xd9\x2a\xb5\xd9\x76\x56\xfa\xf4\x78\x34\x7e\xac\x3a\xef\xbb\x81\xab\x94\x6c\xb3\x55\x7b\xa5\xe4\xf9\xcc\xd0\x35\x3e\xfb\x86\x07\xa5\xaa\x0a\xba\x4d\xce\x88\xf5\x4e\x47\xa1\x20\x7a\x5e\xd6\x1f\x42\x17\x41\x81\x21\x3d\x83\x42\x97\x46\x76\x12\xd1\xfa\x30\x6d\x74\x0d\xe3\xc7\x91\x5c\xb3\x50\x4e\x80\x28\x21\x19\xc1\x45\x6d\xee\x4f\xc8\xa2\xc7\x87\x87\xfb\x93\x7a\x29\xa4\x68\xad\x6b\x22\x28\x8f\xd6\x4d\x44\x0d\x09\x3d\x52\x64\x95\x6d\x60\x77\xf8\x99\x38\x3c\xef\xa1\xeb\x9d\x91\x27\x94\x54\xc7\xbb\xf9\xfb\x36\x3b\x89\x45\x6c\x8f\x83\xae\xb3\x54\x60\x49\xc1\xe1\x8d\xae\x2f\x2f\x57\xa9\x8f\x76\x10\x0e\xb0\x59\xad\x9d\x67\xf1\x88\x4c\xc1\xf4\x4b\x82\xab\x76\x89\xb0\x60\x9c\x70\x68\xc9\xf0\x65\x21\xfb\x3a\xc1\x5e\xad\x64\xfe\xed\xb6\x98\xdf\xc0\x6b\x3d\x9f\xec\x68\x05\x59\xea\xfd\x3b\xb5\xb9\xf3\xc9\x09\x70\x28\xcf\xe2\xe3\xb0\x38\xba\x86\xfa\xc2\x31\x0d\x92\x43\x65\xc1\x30\xbf\x7c\x0b\xc2\x54\x5b\x1e\xff\x11\xad\x20\x57\x03\xb3\x64\x11\x3c\x91\x10\xf0\xed\xbb\xae\xd5\x9f\x91\x4b\x61\x1c\x6f\x79\x41\xae\xc1\x54\xfc\x10\x41\xc3\x80\x91\xc5\xf4\xd6\x75\x08\x6c\x8c\x0f\x4d\xfc\xeb\xa0\x33\xe3\x7f\xcf\xba\x56\xb5\x5f\x3d\xaf\x17\x5e\x56\xd3\x99\x7f\x05\x00\x00\xff\xff\x3f\xd9\x2b\xea\x0e\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/common.go"].(os.FileInfo),
		fs["/model.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
